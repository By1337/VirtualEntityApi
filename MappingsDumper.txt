// com.github.oshi:oshi-core:6.2.2	com/github/oshi/oshi-core/6.2.2/oshi-core-6.2.2.jar
// com.google.code.gson:gson:2.10	com/google/code/gson/gson/2.10/gson-2.10.jar
// com.google.guava:failureaccess:1.0.1	com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar
// com.google.guava:guava:31.1-jre	com/google/guava/guava/31.1-jre/guava-31.1-jre.jar
// com.mojang:authlib:3.18.38	com/mojang/authlib/3.18.38/authlib-3.18.38.jar
// com.mojang:brigadier:1.0.18	com/mojang/brigadier/1.0.18/brigadier-1.0.18.jar
// com.mojang:datafixerupper:6.0.6	com/mojang/datafixerupper/6.0.6/datafixerupper-6.0.6.jar
// com.mojang:logging:1.1.1	com/mojang/logging/1.1.1/logging-1.1.1.jar
// commons-io:commons-io:2.11.0	commons-io/commons-io/2.11.0/commons-io-2.11.0.jar
// io.netty:netty-buffer:4.1.82.Final	io/netty/netty-buffer/4.1.82.Final/netty-buffer-4.1.82.Final.jar
// io.netty:netty-codec:4.1.82.Final	io/netty/netty-codec/4.1.82.Final/netty-codec-4.1.82.Final.jar
// io.netty:netty-common:4.1.82.Final	io/netty/netty-common/4.1.82.Final/netty-common-4.1.82.Final.jar
// io.netty:netty-handler:4.1.82.Final	io/netty/netty-handler/4.1.82.Final/netty-handler-4.1.82.Final.jar
// io.netty:netty-resolver:4.1.82.Final	io/netty/netty-resolver/4.1.82.Final/netty-resolver-4.1.82.Final.jar
// io.netty:netty-transport:4.1.82.Final	io/netty/netty-transport/4.1.82.Final/netty-transport-4.1.82.Final.jar
// io.netty:netty-transport-classes-epoll:4.1.82.Final	io/netty/netty-transport-classes-epoll/4.1.82.Final/netty-transport-classes-epoll-4.1.82.Final.jar
// io.netty:netty-transport-native-epoll:4.1.82.Final:linux-x86_64	io/netty/netty-transport-native-epoll/4.1.82.Final/netty-transport-native-epoll-4.1.82.Final-linux-x86_64.jar
// io.netty:netty-transport-native-epoll:4.1.82.Final:linux-aarch_64	io/netty/netty-transport-native-epoll/4.1.82.Final/netty-transport-native-epoll-4.1.82.Final-linux-aarch_64.jar
// io.netty:netty-transport-native-unix-common:4.1.82.Final	io/netty/netty-transport-native-unix-common/4.1.82.Final/netty-transport-native-unix-common-4.1.82.Final.jar
// it.unimi.dsi:fastutil:8.5.9	it/unimi/dsi/fastutil/8.5.9/fastutil-8.5.9.jar
// net.java.dev.jna:jna:5.12.1	net/java/dev/jna/jna/5.12.1/jna-5.12.1.jar
// net.java.dev.jna:jna-platform:5.12.1	net/java/dev/jna/jna-platform/5.12.1/jna-platform-5.12.1.jar
// net.sf.jopt-simple:jopt-simple:5.0.4	net/sf/jopt-simple/jopt-simple/5.0.4/jopt-simple-5.0.4.jar
// org.apache.commons:commons-lang3:3.12.0	org/apache/commons/commons-lang3/3.12.0/commons-lang3-3.12.0.jar
// org.apache.logging.log4j:log4j-api:2.19.0	org/apache/logging/log4j/log4j-api/2.19.0/log4j-api-2.19.0.jar
// org.apache.logging.log4j:log4j-core:2.19.0	org/apache/logging/log4j/log4j-core/2.19.0/log4j-core-2.19.0.jar
// org.apache.logging.log4j:log4j-slf4j2-impl:2.19.0	org/apache/logging/log4j/log4j-slf4j2-impl/2.19.0/log4j-slf4j2-impl-2.19.0.jar
// org.joml:joml:1.10.5	org/joml/joml/1.10.5/joml-1.10.5.jar
// org.slf4j:slf4j-api:2.0.1	org/slf4j/slf4j-api/2.0.1/slf4j-api-2.0.1.jar
//  org.by1337.blib.nbt:Blib-nbt: 1.3.1-beta

package net.minecraft.world.entity.monster; // req

import com.mojang.authlib.GameProfile;
import net.minecraft.core.BlockPos;
import net.minecraft.core.Direction;
import net.minecraft.core.registries.BuiltInRegistries;
import net.minecraft.network.ConnectionProtocol;
import net.minecraft.network.protocol.Packet;
import net.minecraft.network.protocol.PacketFlow;
import net.minecraft.network.protocol.game.*;
import net.minecraft.network.syncher.EntityDataAccessor;
import net.minecraft.network.syncher.EntityDataSerializer;
import net.minecraft.network.syncher.EntityDataSerializers;
import net.minecraft.server.level.ServerPlayer;
import net.minecraft.world.InteractionHand;
import net.minecraft.world.entity.*;
import net.minecraft.world.entity.animal.Fox;
import net.minecraft.world.entity.animal.Panda;
import net.minecraft.world.entity.animal.axolotl.Axolotl;
import net.minecraft.world.entity.animal.sniffer.Sniffer;
import net.minecraft.world.entity.boss.enderdragon.phases.EnderDragonPhase;
import net.minecraft.world.entity.decoration.PaintingVariant;
import net.minecraft.world.entity.monster.warden.Warden;
import net.minecraft.world.entity.npc.VillagerProfession;
import net.minecraft.world.entity.npc.VillagerType;
import net.minecraft.world.entity.player.Player;
import net.minecraft.world.entity.vehicle.Boat;
import net.minecraft.world.item.DyeColor;
import net.minecraft.world.item.ItemDisplayContext;
import net.minecraft.world.phys.Vec3;
import org.by1337.blib.nbt.MojangNbtReader;
import org.by1337.blib.nbt.NBT;
import org.by1337.blib.nbt.NBTToStringStyle;
import org.by1337.blib.nbt.impl.CompoundTag;
import org.by1337.blib.nbt.impl.ListNBT;
import sun.misc.Unsafe;

import java.io.File;
import java.io.PrintStream;
import java.lang.invoke.MethodHandles;
import java.lang.invoke.MethodType;
import java.lang.reflect.Field;
import java.lang.reflect.ParameterizedType;
import java.net.URL;
import java.net.URLClassLoader;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.*;

public class MappingsDumper {

    private static PrintStream printStream;

    public static void main(String[] args) throws Throwable {
        addMinecraftClasses();
        printStream = System.out;

        Runtime.getRuntime().addShutdownHook(new Thread(() -> {
            try {
                Map<EntityDataSerializer<?>, String> serializers = getEntityDataSerializers();
                createMappings(serializers);
                //    EazyEntityDumper.main(args);
                System.setOut(printStream);
            } catch (Throwable e) {
                printStream.println("Error dumping entities");
                e.printStackTrace(printStream);
            }
        }));
        net.minecraft.server.Main.main(args);
    }

    @SuppressWarnings("all")
    private static void createMappings(Map<EntityDataSerializer<?>, String> serializers) throws Throwable {
        CompoundTag data = new CompoundTag();

        Set<Class<?>> entities = new HashSet<>();
        // find all entities class
        for (Field field : EntityType.class.getDeclaredFields()) {
            field.setAccessible(true);
            if (field.getType() != EntityType.class) continue;
            Class<?> entityClazz = Class.forName(((ParameterizedType) field.getGenericType()).getActualTypeArguments()[0].getTypeName());

            entities.add(entityClazz);
            Class<?> superClazz = entityClazz.getSuperclass();
            do {
                entities.add(superClazz);
                superClazz = superClazz.getSuperclass();
            } while (superClazz != Object.class);
        }

        CompoundTag entitiesData = new CompoundTag();
        for (Class<?> entityType : entities) {
            List<NBT> netwokData = new ArrayList<>();
            for (Field field : entityType.getDeclaredFields()) {
                field.setAccessible(true);
                if (field.getType() != EntityDataAccessor.class) continue;

                EntityDataAccessor<?> accessor = (EntityDataAccessor<?>) field.get(null);
                CompoundTag o = new CompoundTag();
                o.putString("type", serializers.getOrDefault(accessor.getSerializer(), "UNKNOWN"));
                o.putInt("id", accessor.getId());
                o.putString("name", field.getName());
                netwokData.add(o);
            }
            if (!netwokData.isEmpty()) {
                String name = entityType.getCanonicalName();
                String trimName = name.substring(name.lastIndexOf(".") + 1);
                ListNBT listNBT = new ListNBT(netwokData);
                if (entitiesData.has(trimName)) {
                    throw new IllegalStateException("Dublicate entity type " + trimName + " full name " + entityType.getCanonicalName());
                }
                entitiesData.putTag(trimName, listNBT);
            }
        }
        data.putTag("entities", entitiesData);

        Field theUnsafe = Unsafe.class.getDeclaredField("theUnsafe");
        theUnsafe.setAccessible(true);
        Unsafe unsafe = (Unsafe) theUnsafe.get(null);

        CompoundTag typeToData = new CompoundTag();
        for (Field field : EntityType.class.getDeclaredFields()) {
            field.setAccessible(true);
            if (field.getType() != EntityType.class) continue;
            EntityType<?> type = (EntityType<?>) field.get(null);
            if (type == EntityType.MARKER) continue;
            CompoundTag info = new CompoundTag();
            info.putInt("networkId", BuiltInRegistries.ENTITY_TYPE.getId(type));
            Class<?> entityClazz = Class.forName(((ParameterizedType) field.getGenericType()).getActualTypeArguments()[0].getTypeName());
            if (entityClazz == Player.class) {
                entityClazz = ServerPlayer.class;
            }

            Entity entity = (Entity) unsafe.allocateInstance(entityClazz);
            Class<?> c = entity.getClass();
            do { // init base fields
                for (Field f : c.getDeclaredFields()) {
                    f.setAccessible(true);
                    if (f.getType() == Vec3.class) {
                        f.set(entity, new Vec3(0, 0, 0));
                    } else if (f.getType() == BlockPos.class) {
                        f.set(entity, new BlockPos(0, 0, 0));
                    } else if (f.getType() == Direction.class) {
                        f.set(entity, Direction.SOUTH);
                    } else if (f.getType() == GameProfile.class) {
                        f.set(entity, new GameProfile(UUID.randomUUID(), "name"));
                    }
                }
                c = c.getSuperclass();
            } while (c != Object.class);
            if (entity.getClass() == Warden.class) {
                info.putString("spawnPacket", "ADD_ENTITY_PACKET");
            } else {
                Class<?> spawnPacket = entity.getAddEntityPacket().getClass();
                if (spawnPacket == ClientboundAddEntityPacket.class) {
                    info.putString("spawnPacket", "ADD_ENTITY_PACKET");
                } /*else if (spawnPacket == ClientboundAddMobPacket.class) { // removed in 1.19.4
                info.putString("spawnPacket", "ADD_MOB_PACKET");
            }*/ else if (spawnPacket == ClientboundAddPlayerPacket.class) {
                    info.putString("spawnPacket", "ADD_PLAYER_PACKET");
                } else if (spawnPacket == ClientboundAddExperienceOrbPacket.class) {
                    info.putString("spawnPacket", "ADD_EXPERIENCE_ORB_PACKET");
                }/* else if (spawnPacket == ClientboundAddPaintingPacket.class) { // removed in 1.19.4
                info.putString("spawnPacket", "ADD_PAINTING_PACKET");
            }*/ else {
                    throw new IllegalStateException("Unknown spawn packet " + spawnPacket.getCanonicalName());
                }
            }

            typeToData.putTag(field.getName(), info);
        }
        data.putTag("typeToData", typeToData);


        CompoundTag serializerToId = new CompoundTag();
        for (Field field : EntityDataSerializers.class.getDeclaredFields()) {
            field.setAccessible(true);
            if (field.getType() != EntityDataSerializer.class) continue;
            serializerToId.putInt(field.getName(), EntityDataSerializers.getSerializedId((EntityDataSerializer<?>) field.get(null)));
        }
        data.putTag("serializerToId", serializerToId);

        CompoundTag enums = new CompoundTag();

        { // BoatType
            CompoundTag boatType = new CompoundTag();
            for (Boat.Type value : Boat.Type.values()) {
                boatType.putInt(value.name(), value.ordinal());
            }
            enums.putTag("dev.by1337.virtualentity.api.entity.BoatType", boatType);
        }
        { // DyeColor
            CompoundTag dyeColor = new CompoundTag();
            for (var value : DyeColor.values()) {
                dyeColor.putInt(value.name(), value.getId());
            }
            enums.putTag("dev.by1337.virtualentity.api.entity.DyeColor", dyeColor);
        }
        { // EnderDragonPhase
            CompoundTag phase = new CompoundTag();
            for (Field field : EnderDragonPhase.class.getDeclaredFields()) {
                field.setAccessible(true);
                if (field.getType() != EnderDragonPhase.class) continue;
                EnderDragonPhase<?> phase1 = (EnderDragonPhase<?>) field.get(null);
                phase.putInt(field.getName(), phase1.getId());
            }
            enums.putTag("dev.by1337.virtualentity.api.entity.EnderDragonPhase", phase);
        }

        { // animationToId
            CompoundTag animationToId = new CompoundTag();
            animationToId.putInt("SWING_MAIN_ARM", ClientboundAnimatePacket.SWING_MAIN_HAND);
            animationToId.putInt("TAKE_DAMAGE", 1); // todo
            animationToId.putInt("LEAVE_BED", ClientboundAnimatePacket.WAKE_UP);
            animationToId.putInt("SWING_OFFHAND", ClientboundAnimatePacket.SWING_OFF_HAND);
            animationToId.putInt("CRITICAL_EFFECT", ClientboundAnimatePacket.CRITICAL_HIT);
            animationToId.putInt("MAGIC_CRITICAL_EFFECT", ClientboundAnimatePacket.MAGIC_CRITICAL_HIT);
            enums.putTag("dev.by1337.virtualentity.api.entity.EntityAnimation", animationToId);
        }

        { // EquipmentSlot
            CompoundTag equipmentSlotToId = new CompoundTag();
            for (var value : EquipmentSlot.values()) {
                equipmentSlotToId.putInt(value.name(), value.ordinal());
            }
            enums.putTag("dev.by1337.virtualentity.api.entity.EquipmentSlot", equipmentSlotToId);
        }
        { // FoxType
            CompoundTag foxTypeToId = new CompoundTag();
            for (var value : Fox.Type.values()) {
                foxTypeToId.putInt(value.name(), value.getId());
            }
            enums.putTag("dev.by1337.virtualentity.api.entity.FoxType", foxTypeToId);
        }
        { // IllagerSpell
            CompoundTag illagerSpellToId = new CompoundTag();
            for (var value : SpellcasterIllager.IllagerSpell.values()) {
                illagerSpellToId.putInt(value.name(), value.ordinal());
            }
            enums.putTag("dev.by1337.virtualentity.api.entity.IllagerSpell", illagerSpellToId);
        }
        { // InteractionHand
            CompoundTag hand = new CompoundTag();
            for (var value : InteractionHand.values()) {
                hand.putInt(value.name(), value.ordinal());
            }
            enums.putTag("dev.by1337.virtualentity.api.entity.InteractionHand", hand);
        }
//        { // MushroomType
//            CompoundTag hand = new CompoundTag();
//            for (var value : MushroomCow.MushroomType.values()) {
//                hand.putInt(value.name(), value.ordinal());
//            }
//            enums.putTag("dev.by1337.virtualentity.api.entity.MushroomType", hand);
//        }

        { // PandaGene
            CompoundTag pandaGeneToId = new CompoundTag();
            for (var value : Panda.Gene.values()) {
                pandaGeneToId.putInt(value.name(), value.ordinal());
            }
            enums.putTag("dev.by1337.virtualentity.api.entity.PandaGene", pandaGeneToId);
        }
        { // Pose
            CompoundTag poseToId = new CompoundTag();
            for (var value : Pose.values()) {
                poseToId.putInt(value.name(), value.ordinal());
            }
            enums.putTag("dev.by1337.virtualentity.api.entity.Pose", poseToId);
        }
        { // ItemDisplayType
            CompoundTag poseToId = new CompoundTag();
            for (var value : ItemDisplayContext.values()) {
                poseToId.putInt(value.name(), value.getId());
            }
            enums.putTag("dev.by1337.virtualentity.api.entity.ItemDisplayType", poseToId);
        }
        { // AxolotVariant
            CompoundTag poseToId = new CompoundTag();
            for (var value : Axolotl.Variant.values()) {
                poseToId.putInt(value.name(), value.getId());
            }
            enums.putTag("dev.by1337.virtualentity.api.entity.AxolotVariant", poseToId);
        }
        { // SnifferState
            CompoundTag poseToId = new CompoundTag();
            for (var value : Sniffer.State.values()) {
                poseToId.putInt(value.name(), value.ordinal());
            }
            enums.putTag("dev.by1337.virtualentity.api.entity.SnifferState", poseToId);
        }
        { // VillagerProfession
            CompoundTag profession = new CompoundTag();
            for (Field field : VillagerProfession.class.getDeclaredFields()) {
                field.setAccessible(true);
                if (field.getType() != VillagerProfession.class) continue;
                VillagerProfession villagerProfession = (VillagerProfession) field.get(null);
                profession.putInt(field.getName(), BuiltInRegistries.VILLAGER_PROFESSION.getId(villagerProfession));
            }
            enums.putTag("dev.by1337.virtualentity.api.entity.npc.VillagerProfession", profession);
        }
        { // VillagerType
            CompoundTag villagerType = new CompoundTag();
            for (Field field : VillagerType.class.getDeclaredFields()) {
                field.setAccessible(true);
                if (field.getType() != VillagerType.class) continue;
                VillagerType villagerProfession = (VillagerType) field.get(null);
                villagerType.putInt(field.getName(), BuiltInRegistries.VILLAGER_TYPE.getId(villagerProfession));
            }
            enums.putTag("dev.by1337.virtualentity.api.entity.npc.VillagerType", villagerType);
        }

        { // PacketType
            CompoundTag packets = new CompoundTag();
            packets.putInt("PLAYER_INFO_PACKET", ConnectionProtocol.PLAY.getPacketId(PacketFlow.CLIENTBOUND, (Packet<?>) unsafe.allocateInstance(ClientboundPlayerInfoRemovePacket.class))); // new 1.19.4
            packets.putInt("PLAYER_INFO_PACKET", ConnectionProtocol.PLAY.getPacketId(PacketFlow.CLIENTBOUND, (Packet<?>) unsafe.allocateInstance(ClientboundPlayerInfoUpdatePacket.class)));
            packets.putInt("SET_PLAYER_TEAM_PACKET", ConnectionProtocol.PLAY.getPacketId(PacketFlow.CLIENTBOUND, (Packet<?>) unsafe.allocateInstance(ClientboundSetPlayerTeamPacket.class)));
            packets.putInt("SET_ENTITY_DATA_PACKET", ConnectionProtocol.PLAY.getPacketId(PacketFlow.CLIENTBOUND, (Packet<?>) unsafe.allocateInstance(ClientboundSetEntityDataPacket.class)));
            packets.putInt("ANIMATE_PACKET", ConnectionProtocol.PLAY.getPacketId(PacketFlow.CLIENTBOUND, (Packet<?>) unsafe.allocateInstance(ClientboundAnimatePacket.class)));
            packets.putInt("ROTATE_HEAD_PACKET", ConnectionProtocol.PLAY.getPacketId(PacketFlow.CLIENTBOUND, (Packet<?>) unsafe.allocateInstance(ClientboundRotateHeadPacket.class)));
            packets.putInt("TELEPORT_ENTITY_PACKET", ConnectionProtocol.PLAY.getPacketId(PacketFlow.CLIENTBOUND, (Packet<?>) unsafe.allocateInstance(ClientboundTeleportEntityPacket.class)));
            packets.putInt("ADD_ENTITY_PACKET", ConnectionProtocol.PLAY.getPacketId(PacketFlow.CLIENTBOUND, (Packet<?>) unsafe.allocateInstance(ClientboundAddEntityPacket.class)));
            //packets.putInt("ADD_MOB_PACKET", ConnectionProtocol.PLAY.getPacketId(PacketFlow.CLIENTBOUND, (Packet<?>) unsafe.allocateInstance(ClientboundAddMobPacket.class))); // removed in 1.19.4
            packets.putInt("ADD_PLAYER_PACKET", ConnectionProtocol.PLAY.getPacketId(PacketFlow.CLIENTBOUND, (Packet<?>) unsafe.allocateInstance(ClientboundAddPlayerPacket.class)));
            packets.putInt("ADD_EXPERIENCE_ORB_PACKET", ConnectionProtocol.PLAY.getPacketId(PacketFlow.CLIENTBOUND, (Packet<?>) unsafe.allocateInstance(ClientboundAddExperienceOrbPacket.class)));
            //packets.putInt("ADD_PAINTING_PACKET", ConnectionProtocol.PLAY.getPacketId(PacketFlow.CLIENTBOUND, (Packet<?>) unsafe.allocateInstance(ClientboundAddPaintingPacket.class))); // removed in 1.19.4
            packets.putInt("REMOVE_ENTITIES_PACKET", ConnectionProtocol.PLAY.getPacketId(PacketFlow.CLIENTBOUND, (Packet<?>) unsafe.allocateInstance(ClientboundRemoveEntitiesPacket.class)));
            packets.putInt("SET_EQUIPMENT_PACKET", ConnectionProtocol.PLAY.getPacketId(PacketFlow.CLIENTBOUND, (Packet<?>) unsafe.allocateInstance(ClientboundSetEquipmentPacket.class)));
            packets.putInt("MOVE_ENTITY_PACKET_POS", ConnectionProtocol.PLAY.getPacketId(PacketFlow.CLIENTBOUND, (Packet<?>) unsafe.allocateInstance(ClientboundMoveEntityPacket.Pos.class)));
            packets.putInt("MOVE_ENTITY_PACKET_POS_ROT", ConnectionProtocol.PLAY.getPacketId(PacketFlow.CLIENTBOUND, (Packet<?>) unsafe.allocateInstance(ClientboundMoveEntityPacket.PosRot.class)));
            packets.putInt("MOVE_ENTITY_PACKET_ROT", ConnectionProtocol.PLAY.getPacketId(PacketFlow.CLIENTBOUND, (Packet<?>) unsafe.allocateInstance(ClientboundMoveEntityPacket.Rot.class)));
            packets.putInt("SET_ENTITY_MOTION_PACKET", ConnectionProtocol.PLAY.getPacketId(PacketFlow.CLIENTBOUND, (Packet<?>) unsafe.allocateInstance(ClientboundSetEntityMotionPacket.class)));
            packets.putInt("ENTITY_EVENT_PACKET", ConnectionProtocol.PLAY.getPacketId(PacketFlow.CLIENTBOUND, (Packet<?>) unsafe.allocateInstance(ClientboundEntityEventPacket.class)));
            enums.putTag("dev.by1337.virtualentity.core.network.PacketType", packets);
        }
        { // PaintingMotive
            CompoundTag paiting = new CompoundTag();
            for (PaintingVariant paintingVariant : BuiltInRegistries.PAINTING_VARIANT) {
                var val = BuiltInRegistries.PAINTING_VARIANT.getKey(paintingVariant);
                paiting.putInt(val.getPath().toUpperCase(Locale.ENGLISH), BuiltInRegistries.PAINTING_VARIANT.getId(paintingVariant));
            }
            enums.putTag("dev.by1337.virtualentity.api.entity.PaintingMotive", paiting);
        }
        { // CatVariant
            CompoundTag cat = new CompoundTag();
            for (var catVariant : BuiltInRegistries.CAT_VARIANT) {
                var val = BuiltInRegistries.CAT_VARIANT.getKey(catVariant);
                cat.putInt(val.getPath().toUpperCase(Locale.ENGLISH), BuiltInRegistries.CAT_VARIANT.getId(catVariant));
            }
            enums.putTag("dev.by1337.virtualentity.api.entity.CatVariant", cat);
        }
        { // FrogVariant
            CompoundTag frog = new CompoundTag();
            for (var catVariant : BuiltInRegistries.FROG_VARIANT) {
                var val = BuiltInRegistries.FROG_VARIANT.getKey(catVariant);
                frog.putInt(val.getPath().toUpperCase(Locale.ENGLISH), BuiltInRegistries.FROG_VARIANT.getId(catVariant));
            }
            enums.putTag("dev.by1337.virtualentity.api.entity.FrogVariant", frog);
        }
        { // BillboardConstraints
            CompoundTag billboardConstraints = new CompoundTag();
            for (var value : Display.BillboardConstraints.values()) {
                billboardConstraints.putInt(value.name(), value.ordinal());
            }
            enums.putTag("dev.by1337.virtualentity.api.entity.BillboardConstraints", billboardConstraints);
        }
        { // EntityEvent
            CompoundTag entityEvents = new CompoundTag();
            for (Field field : EntityEvent.class.getDeclaredFields()) {
                field.setAccessible(true);
                entityEvents.putInt(field.getName(), (Byte) field.get(null));
            }
            enums.putTag("dev.by1337.virtualentity.api.entity.EntityEvent", entityEvents);
        }
        data.putTag("enums", enums);

        Files.writeString(Path.of("./mappings.json"), data.toString(NBTToStringStyle.JSON_STYLE_COMPACT));
        MojangNbtReader.writeCompressed(data, new File("./mappings.nbt"));
    }

    private static Map<EntityDataSerializer<?>, String> getEntityDataSerializers() throws Throwable {
        Map<EntityDataSerializer<?>, String> map = new IdentityHashMap<>();
        for (Field field : EntityDataSerializers.class.getDeclaredFields()) {
            field.setAccessible(true);
            if (field.getType() != EntityDataSerializer.class) continue;
            map.put((EntityDataSerializer<?>) field.get(null), field.getName());
        }
        return map;
    }


    private static void addMinecraftClasses() throws Throwable {
        File file = new File("./lib/minecraft_server_1.19.4.jar");

        URLClassLoader urlClassLoader = new URLClassLoader(new URL[]{file.toURI().toURL()});

        Field theUnsafe = Unsafe.class.getDeclaredField("theUnsafe");
        theUnsafe.setAccessible(true);
        Unsafe unsafe = (Unsafe) theUnsafe.get(null);
        Field implLookup = MethodHandles.Lookup.class.getDeclaredField("IMPL_LOOKUP");

        MethodHandles.Lookup lookup = (MethodHandles.Lookup) unsafe.getObject(unsafe.staticFieldBase(implLookup), unsafe.staticFieldOffset(implLookup));

        lookup
                .findVirtual(Class.forName("java.net.URLClassLoader"), "addURL", MethodType.methodType(Void.TYPE, URL.class))
                .invoke((URLClassLoader) urlClassLoader, file.toPath().toUri().toURL());

    }
}
